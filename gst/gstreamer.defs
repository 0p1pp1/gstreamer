;; -*- scheme -*-
; object definitions ...
(define-object Object
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstObject")
  (gtype-id "GST_TYPE_OBJECT")
)

(define-object Element
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstElement")
  (gtype-id "GST_TYPE_ELEMENT")
)

(define-object Bin
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstBin")
  (gtype-id "GST_TYPE_BIN")
)

(define-object Clock
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstClock")
  (gtype-id "GST_TYPE_CLOCK")
)

(define-object Autoplug
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstAutoplug")
  (gtype-id "GST_TYPE_AUTOPLUG")
)

(define-object Pad
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstPad")
  (gtype-id "GST_TYPE_PAD")
)

(define-object GhostPad
  (in-module "Gst")
  (parent "GstPad")
  (c-name "GstGhostPad")
  (gtype-id "GST_TYPE_GHOST_PAD")
)

(define-object PadTemplate
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstPadTemplate")
  (gtype-id "GST_TYPE_PAD_TEMPLATE")
)

(define-object Pipeline
  (in-module "Gst")
  (parent "GstBin")
  (c-name "GstPipeline")
  (gtype-id "GST_TYPE_PIPELINE")
)

(define-object PluginFeature
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstPluginFeature")
  (gtype-id "GST_TYPE_PLUGIN_FEATURE")
)

(define-object ElementFactory
  (in-module "Gst")
  (parent "GstPluginFeature")
  (c-name "GstElementFactory")
  (gtype-id "GST_TYPE_ELEMENT_FACTORY")
)

(define-object AutoplugFactory
  (in-module "Gst")
  (parent "GstPluginFeature")
  (c-name "GstAutoplugFactory")
  (gtype-id "GST_TYPE_AUTOPLUG_FACTORY")
)

(define-object Queue
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstQueue")
  (gtype-id "GST_TYPE_QUEUE")
)

(define-object RealPad
  (in-module "Gst")
  (parent "GstPad")
  (c-name "GstRealPad")
  (gtype-id "GST_TYPE_REAL_PAD")
)

(define-object Scheduler
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstScheduler")
  (gtype-id "GST_TYPE_SCHEDULER")
)

(define-object SchedulerFactory
  (in-module "Gst")
  (parent "GstPluginFeature")
  (c-name "GstSchedulerFactory")
  (gtype-id "GST_TYPE_SCHEDULER_FACTORY")
)

(define-object SystemClock
  (in-module "Gst")
  (parent "GstClock")
  (c-name "GstSystemClock")
  (gtype-id "GST_TYPE_SYSTEM_CLOCK")
)

(define-object Thread
  (in-module "Gst")
  (parent "GstBin")
  (c-name "GstThread")
  (gtype-id "GST_TYPE_THREAD")
)

(define-object TimeCache
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstTimeCache")
  (gtype-id "GST_TYPE_TIME_CACHE")
)

(define-object TypeFactory
  (in-module "Gst")
  (parent "GstPluginFeature")
  (c-name "GstTypeFactory")
  (gtype-id "GST_TYPE_TYPE_FACTORY")
)

(define-object TypeFind
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTypeFind")
  (gtype-id "GST_TYPE_TYPE_FIND")
)

(define-object XML
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstXML")
  (gtype-id "GST_TYPE_XML")
)

;; Enumerations and flags ...

(define-enum AutoplugFlags
  (in-module "Gst")
  (c-name "GstAutoplugFlags")
  (gtype-id "GST_TYPE_AUTOPLUG_FLAGS")
  (values
    '("to-caps" "GST_AUTOPLUG_TO_CAPS")
    '("to-renderer" "GST_AUTOPLUG_TO_RENDERER")
    '("flag-last" "GST_AUTOPLUG_FLAG_LAST")
  )
)

(define-enum BinFlags
  (in-module "Gst")
  (c-name "GstBinFlags")
  (gtype-id "GST_TYPE_BIN_FLAGS")
  (values
    '("flag-manager" "GST_BIN_FLAG_MANAGER")
    '("self-schedulable" "GST_BIN_SELF_SCHEDULABLE")
    '("flag-prefer-cothreads" "GST_BIN_FLAG_PREFER_COTHREADS")
    '("flag-fixed-clock" "GST_BIN_FLAG_FIXED_CLOCK")
    '("flag-last" "GST_BIN_FLAG_LAST")
  )
)

(define-enum BufferFlags
  (in-module "Gst")
  (c-name "GstBufferFlags")
  (gtype-id "GST_TYPE_BUFFER_FLAGS")
  (values
    '("readonly" "GST_BUFFER_READONLY")
    '("original" "GST_BUFFER_ORIGINAL")
    '("dontfree" "GST_BUFFER_DONTFREE")
  )
)

(define-enum ClockReturn
  (in-module "Gst")
  (c-name "GstClockReturn")
  (gtype-id "GST_TYPE_CLOCK_RETURN")
  (values
    '("stopped" "GST_CLOCK_STOPPED")
    '("timeout" "GST_CLOCK_TIMEOUT")
    '("early" "GST_CLOCK_EARLY")
    '("error" "GST_CLOCK_ERROR")
  )
)

(define-flags CPUFlags
  (in-module "Gst")
  (c-name "GstCPUFlags")
  (gtype-id "GST_TYPE_CPU_FLAGS")
  (values
    '("mmx" "GST_CPU_FLAG_MMX")
    '("sse" "GST_CPU_FLAG_SSE")
    '("mmxext" "GST_CPU_FLAG_MMXEXT")
    '("3dnow" "GST_CPU_FLAG_3DNOW")
  )
)

(define-enum ElementFlags
  (in-module "Gst")
  (c-name "GstElementFlags")
  (gtype-id "GST_TYPE_ELEMENT_FLAGS")
  (values
    '("complex" "GST_ELEMENT_COMPLEX")
    '("decoupled" "GST_ELEMENT_DECOUPLED")
    '("thread-suggested" "GST_ELEMENT_THREAD_SUGGESTED")
    '("no-seek" "GST_ELEMENT_NO_SEEK")
    '("infinite-loop" "GST_ELEMENT_INFINITE_LOOP")
    '("scheduler-private1" "GST_ELEMENT_SCHEDULER_PRIVATE1")
    '("scheduler-private2" "GST_ELEMENT_SCHEDULER_PRIVATE2")
    '("new-loopfunc" "GST_ELEMENT_NEW_LOOPFUNC")
    '("event-aware" "GST_ELEMENT_EVENT_AWARE")
    '("flag-last" "GST_ELEMENT_FLAG_LAST")
  )
)

(define-enum EventType
  (in-module "Gst")
  (c-name "GstEventType")
  (gtype-id "GST_TYPE_EVENT_TYPE")
  (values
    '("unknown" "GST_EVENT_UNKNOWN")
    '("eos" "GST_EVENT_EOS")
    '("flush" "GST_EVENT_FLUSH")
    '("empty" "GST_EVENT_EMPTY")
    '("seek" "GST_EVENT_SEEK")
    '("discontinuous" "GST_EVENT_DISCONTINUOUS")
    '("new-media" "GST_EVENT_NEW_MEDIA")
    '("info" "GST_EVENT_INFO")
    '("error" "GST_EVENT_ERROR")
  )
)

(define-enum SeekType
  (in-module "Gst")
  (c-name "GstSeekType")
  (gtype-id "GST_TYPE_SEEK_TYPE")
  (values
    '("any" "GST_SEEK_ANY")
    '("timeoffset-set" "GST_SEEK_TIMEOFFSET_SET")
    '("byteoffset-set" "GST_SEEK_BYTEOFFSET_SET")
    '("byteoffset-cur" "GST_SEEK_BYTEOFFSET_CUR")
    '("byteoffset-end" "GST_SEEK_BYTEOFFSET_END")
  )
)

(define-enum ObjectFlags
  (in-module "Gst")
  (c-name "GstObjectFlags")
  (gtype-id "GST_TYPE_OBJECT_FLAGS")
  (values
    '("destroyed" "GST_DESTROYED")
    '("floating" "GST_FLOATING")
    '("object-flag-last" "GST_OBJECT_FLAG_LAST")
  )
)

(define-enum RegionType
  (in-module "Gst")
  (c-name "GstRegionType")
  (gtype-id "GST_TYPE_REGION_TYPE")
  (values
    '("void" "GST_REGION_VOID")
    '("offset-len" "GST_REGION_OFFSET_LEN")
    '("time-len" "GST_REGION_TIME_LEN")
  )
)

(define-enum PadConnectReturn
  (in-module "Gst")
  (c-name "GstPadConnectReturn")
  (gtype-id "GST_TYPE_PAD_CONNECT_RETURN")
  (values
    '("refused" "GST_PAD_CONNECT_REFUSED")
    '("ok" "GST_PAD_CONNECT_OK")
    '("done" "GST_PAD_CONNECT_DONE")
    '("delayed" "GST_PAD_CONNECT_DELAYED")
  )
)

(define-enum PadDirection
  (in-module "Gst")
  (c-name "GstPadDirection")
  (gtype-id "GST_TYPE_PAD_DIRECTION")
  (values
    '("unknown" "GST_PAD_UNKNOWN")
    '("src" "GST_PAD_SRC")
    '("sink" "GST_PAD_SINK")
  )
)

(define-enum PadFlags
  (in-module "Gst")
  (c-name "GstPadFlags")
  (gtype-id "GST_TYPE_PAD_FLAGS")
  (values
    '("disabled" "GST_PAD_DISABLED")
    '("eos" "GST_PAD_EOS")
    '("flag-last" "GST_PAD_FLAG_LAST")
  )
)

(define-enum PadPresence
  (in-module "Gst")
  (c-name "GstPadPresence")
  (gtype-id "GST_TYPE_PAD_PRESENCE")
  (values
    '("always" "GST_PAD_ALWAYS")
    '("sometimes" "GST_PAD_SOMETIMES")
    '("request" "GST_PAD_REQUEST")
  )
)

(define-enum ParseErrors
  (in-module "Gst")
  (c-name "GstParseErrors")
  (gtype-id "GST_TYPE_PARSE_ERRORS")
  (values
    '("syntax" "GST_PARSE_ERROR_SYNTAX")
    '("creating-element" "GST_PARSE_ERROR_CREATING_ELEMENT")
    '("nosuch-element" "GST_PARSE_ERROR_NOSUCH_ELEMENT")
    '("internal" "GST_PARSE_ERROR_INTERNAL")
    '("connect" "GST_PARSE_ERROR_CONNECT")
  )
)

(define-enum PropsId
  (in-module "Gst")
  (c-name "GstPropsId")
  (gtype-id "GST_TYPE_PROPS_ID")
  (values
    '("end-id" "GST_PROPS_END_ID")
    '("int-id" "GST_PROPS_INT_ID")
    '("float-id" "GST_PROPS_FLOAT_ID")
    '("fourcc-id" "GST_PROPS_FOURCC_ID")
    '("bool-id" "GST_PROPS_BOOL_ID")
    '("string-id" "GST_PROPS_STRING_ID")
    '("var-id" "GST_PROPS_VAR_ID")
    '("list-id" "GST_PROPS_LIST_ID")
    '("float-range-id" "GST_PROPS_FLOAT_RANGE_ID")
    '("int-range-id" "GST_PROPS_INT_RANGE_ID")
    '("last-id" "GST_PROPS_LAST_ID")
  )
)

(define-enum SchedulerState
  (in-module "Gst")
  (c-name "GstSchedulerState")
  (gtype-id "GST_TYPE_SCHEDULER_STATE")
  (values
    '("none" "GST_SCHEDULER_STATE_NONE")
    '("running" "GST_SCHEDULER_STATE_RUNNING")
    '("stopped" "GST_SCHEDULER_STATE_STOPPED")
    '("error" "GST_SCHEDULER_STATE_ERROR")
  )
)

(define-enum ThreadState
  (in-module "Gst")
  (c-name "GstThreadState")
  (gtype-id "GST_TYPE_THREAD_STATE")
  (values
    '("state-started" "GST_THREAD_STATE_STARTED")
    '("state-spinning" "GST_THREAD_STATE_SPINNING")
    '("state-reaping" "GST_THREAD_STATE_REAPING")
    '("flag-last" "GST_THREAD_FLAG_LAST")
  )
)

(define-enum TimeCacheCertainty
  (in-module "Gst")
  (c-name "GstTimeCacheCertainty")
  (gtype-id "GST_TYPE_TIME_CACHE_CERTAINTY")
  (values
    '("unknown" "GST_TIMECACHE_UNKNOWN")
    '("certain" "GST_TIMECACHE_CERTAIN")
    '("fuzzy-location" "GST_TIMECACHE_FUZZY_LOCATION")
    '("fuzzy-timestamp" "GST_TIMECACHE_FUZZY_TIMESTAMP")
    '("fuzzy" "GST_TIMECACHE_FUZZY")
  )
)

(define-flags ElementState
  (in-module "Gst")
  (c-name "GstElementState")
  (gtype-id "GST_TYPE_ELEMENT_STATE")
  (values
    '("void-pending" "GST_STATE_VOID_PENDING")
    '("null" "GST_STATE_NULL")
    '("ready" "GST_STATE_READY")
    '("paused" "GST_STATE_PAUSED")
    '("playing" "GST_STATE_PLAYING")
  )
)

(define-enum ElementStateReturn
  (in-module "Gst")
  (c-name "GstElementStateReturn")
  (gtype-id "GST_TYPE_ELEMENT_STATE_RETURN")
  (values
    '("failure" "GST_STATE_FAILURE")
    '("success" "GST_STATE_SUCCESS")
    '("async" "GST_STATE_ASYNC")
  )
)


;; From /usr/include/gst/gst.h

(define-function gst_init_with_popt_table
  (c-name "gst_init_with_popt_table")
  (return-type "none")
  (parameters
    '("int*" "argc")
    '("char**[]" "argv")
    '("const-struct-poptOption*" "popt_options")
  )
)

(define-function gst_main
  (c-name "gst_main")
  (return-type "none")
)

(define-function gst_main_quit
  (c-name "gst_main_quit")
  (return-type "none")
)



;; From /usr/include/gst/gstautoplug.h

(define-function gst_autoplug_get_type
  (c-name "gst_autoplug_get_type")
  (return-type "GType")
)

(define-method signal_new_object
  (of-object "GstAutoplug")
  (c-name "gst_autoplug_signal_new_object")
  (return-type "none")
  (parameters
    '("GstObject*" "object")
  )
)

(define-method to_caps
  (of-object "GstAutoplug")
  (c-name "gst_autoplug_to_caps")
  (return-type "GstElement*")
  (parameters
    '("GstCaps*" "srccaps")
    '("GstCaps*" "sinkcaps")
  )
  (varargs #t)
)

(define-method to_renderers
  (of-object "GstAutoplug")
  (c-name "gst_autoplug_to_renderers")
  (return-type "GstElement*")
  (parameters
    '("GstCaps*" "srccaps")
    '("GstElement*" "target")
  )
  (varargs #t)
)

(define-function gst_autoplugfactory_get_type
  (c-name "gst_autoplugfactory_get_type")
  (return-type "GType")
)

(define-function gst_autoplugfactory_new
  (c-name "gst_autoplugfactory_new")
  (return-type "GstAutoplugFactory*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "longdesc")
    '("GType" "type")
  )
)

(define-method destroy
  (of-object "GstAutoplugFactory")
  (c-name "gst_autoplugfactory_destroy")
  (return-type "none")
)

(define-function gst_autoplugfactory_find
  (c-name "gst_autoplugfactory_find")
  (return-type "GstAutoplugFactory*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_autoplugfactory_get_list
  (c-name "gst_autoplugfactory_get_list")
  (return-type "GList*")
)

(define-method create
  (of-object "GstAutoplugFactory")
  (c-name "gst_autoplugfactory_create")
  (return-type "GstAutoplug*")
)

(define-function gst_autoplugfactory_make
  (c-name "gst_autoplugfactory_make")
  (return-type "GstAutoplug*")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From /usr/include/gst/gstbin.h

(define-function gst_bin_get_type
  (c-name "gst_bin_get_type")
  (return-type "GType")
)

(define-function gst_bin_new
  (c-name "gst_bin_new")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method add
  (of-object "GstBin")
  (c-name "gst_bin_add")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method add_many
  (of-object "GstBin")
  (c-name "gst_bin_add_many")
  (return-type "none")
  (parameters
    '("GstElement*" "element_1")
  )
  (varargs #t)
)

(define-method remove
  (of-object "GstBin")
  (c-name "gst_bin_remove")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method get_by_name
  (of-object "GstBin")
  (c-name "gst_bin_get_by_name")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_by_name_recurse_up
  (of-object "GstBin")
  (c-name "gst_bin_get_by_name_recurse_up")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_list
  (of-object "GstBin")
  (c-name "gst_bin_get_list")
  (return-type "GList*")
)

(define-method set_state_type
  (of-object "GstBin")
  (c-name "gst_bin_set_state_type")
  (return-type "gboolean")
  (parameters
    '("GstElementState" "state")
    '("GType" "type")
  )
)

(define-method iterate
  (of-object "GstBin")
  (c-name "gst_bin_iterate")
  (return-type "gboolean")
)

(define-method use_clock
  (of-object "GstBin")
  (c-name "gst_bin_use_clock")
  (return-type "none")
  (parameters
    '("GstClock*" "clock")
  )
)

(define-method get_clock
  (of-object "GstBin")
  (c-name "gst_bin_get_clock")
  (return-type "GstClock*")
)

(define-method auto_clock
  (of-object "GstBin")
  (c-name "gst_bin_auto_clock")
  (return-type "none")
)

(define-method child_state_change
  (of-object "GstBin")
  (c-name "gst_bin_child_state_change")
  (return-type "none")
  (parameters
    '("GstElementState" "oldstate")
    '("GstElementState" "newstate")
    '("GstElement*" "child")
  )
)

(define-method child_error
  (of-object "GstBin")
  (c-name "gst_bin_child_error")
  (return-type "none")
  (parameters
    '("GstElement*" "child")
  )
)



;; From /usr/include/gst/gstbuffer.h

(define-function _gst_buffer_initialize
  (c-name "_gst_buffer_initialize")
  (return-type "none")
)

(define-function gst_buffer_new
  (c-name "gst_buffer_new")
  (return-type "GstBuffer*")
)

(define-function gst_buffer_new_from_pool
  (c-name "gst_buffer_new_from_pool")
  (return-type "GstBuffer*")
  (parameters
    '("GstBufferPool*" "pool")
    '("guint32" "offset")
    '("guint32" "size")
  )
)

(define-method create_sub
  (of-object "GstBuffer")
  (c-name "gst_buffer_create_sub")
  (return-type "GstBuffer*")
  (parameters
    '("guint32" "offset")
    '("guint32" "size")
  )
)

(define-method ref
  (of-object "GstBuffer")
  (c-name "gst_buffer_ref")
  (return-type "none")
)

(define-method ref_by_count
  (of-object "GstBuffer")
  (c-name "gst_buffer_ref_by_count")
  (return-type "none")
  (parameters
    '("gint" "count")
  )
)

(define-method unref
  (of-object "GstBuffer")
  (c-name "gst_buffer_unref")
  (return-type "none")
)

(define-method destroy
  (of-object "GstBuffer")
  (c-name "gst_buffer_destroy")
  (return-type "none")
)

(define-method copy
  (of-object "GstBuffer")
  (c-name "gst_buffer_copy")
  (return-type "GstBuffer*")
)

(define-method merge
  (of-object "GstBuffer")
  (c-name "gst_buffer_merge")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "buf2")
  )
)

(define-method span
  (of-object "GstBuffer")
  (c-name "gst_buffer_span")
  (return-type "GstBuffer*")
  (parameters
    '("guint32" "offset")
    '("GstBuffer*" "buf2")
    '("guint32" "len")
  )
)

(define-method append
  (of-object "GstBuffer")
  (c-name "gst_buffer_append")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "append")
  )
)

(define-method is_span_fast
  (of-object "GstBuffer")
  (c-name "gst_buffer_is_span_fast")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buf2")
  )
)

(define-function gst_buffer_print_stats
  (c-name "gst_buffer_print_stats")
  (return-type "none")
)



;; From /usr/include/gst/gstbufferpool.h

(define-function _gst_buffer_pool_initialize
  (c-name "_gst_buffer_pool_initialize")
  (return-type "none")
)

(define-function gst_buffer_pool_new
  (c-name "gst_buffer_pool_new")
  (return-type "GstBufferPool*")
)

(define-method ref
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_ref")
  (return-type "none")
)

(define-method ref_by_count
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_ref_by_count")
  (return-type "none")
  (parameters
    '("int" "count")
  )
)

(define-method unref
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_unref")
  (return-type "none")
)

(define-method set_buffer_new_function
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_set_buffer_new_function")
  (return-type "none")
  (parameters
    '("GstBufferPoolBufferNewFunction" "create")
  )
)

(define-method set_buffer_free_function
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_set_buffer_free_function")
  (return-type "none")
  (parameters
    '("GstBufferFreeFunc" "destroy")
  )
)

(define-method set_buffer_copy_function
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_set_buffer_copy_function")
  (return-type "none")
  (parameters
    '("GstBufferCopyFunc" "copy")
  )
)

(define-method set_destroy_hook
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_set_destroy_hook")
  (return-type "none")
  (parameters
    '("GstBufferPoolDestroyHook" "destroy")
  )
)

(define-method set_user_data
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_set_user_data")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method get_user_data
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_get_user_data")
  (return-type "gpointer")
)

(define-method destroy
  (of-object "GstBufferPool")
  (c-name "gst_buffer_pool_destroy")
  (return-type "none")
)

(define-function gst_buffer_pool_get_default
  (c-name "gst_buffer_pool_get_default")
  (return-type "GstBufferPool*")
  (parameters
    '("guint" "buffer_size")
    '("guint" "pool_size")
  )
)



;; From /usr/include/gst/gstcaps.h

(define-function gst_caps_new
  (c-name "gst_caps_new")
  (return-type "GstCaps*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "mime")
    '("GstProps*" "props")
  )
)

(define-function gst_caps_new_id
  (c-name "gst_caps_new_id")
  (return-type "GstCaps*")
  (parameters
    '("const-gchar*" "name")
    '("const-guint16" "id")
    '("GstProps*" "props")
  )
)

(define-method unref
  (of-object "GstCaps")
  (c-name "gst_caps_unref")
  (return-type "GstCaps*")
)

(define-method ref
  (of-object "GstCaps")
  (c-name "gst_caps_ref")
  (return-type "GstCaps*")
)

(define-method destroy
  (of-object "GstCaps")
  (c-name "gst_caps_destroy")
  (return-type "none")
)

(define-method debug
  (of-object "GstCaps")
  (c-name "gst_caps_debug")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method copy
  (of-object "GstCaps")
  (c-name "gst_caps_copy")
  (return-type "GstCaps*")
)

(define-method copy_1
  (of-object "GstCaps")
  (c-name "gst_caps_copy_1")
  (return-type "GstCaps*")
)

(define-method copy_on_write
  (of-object "GstCaps")
  (c-name "gst_caps_copy_on_write")
  (return-type "GstCaps*")
)

(define-method get_name
  (of-object "GstCaps")
  (c-name "gst_caps_get_name")
  (return-type "const-gchar*")
)

(define-method set_name
  (of-object "GstCaps")
  (c-name "gst_caps_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_mime
  (of-object "GstCaps")
  (c-name "gst_caps_get_mime")
  (return-type "const-gchar*")
)

(define-method set_mime
  (of-object "GstCaps")
  (c-name "gst_caps_set_mime")
  (return-type "none")
  (parameters
    '("const-gchar*" "mime")
  )
)

(define-method get_type_id
  (of-object "GstCaps")
  (c-name "gst_caps_get_type_id")
  (return-type "guint16")
)

(define-method set_type_id
  (of-object "GstCaps")
  (c-name "gst_caps_set_type_id")
  (return-type "none")
  (parameters
    '("guint16" "type_id")
  )
)

(define-method set_props
  (of-object "GstCaps")
  (c-name "gst_caps_set_props")
  (return-type "GstCaps*")
  (parameters
    '("GstProps*" "props")
  )
)

(define-method get_props
  (of-object "GstCaps")
  (c-name "gst_caps_get_props")
  (return-type "GstProps*")
)

(define-method get_by_name
  (of-object "GstCaps")
  (c-name "gst_caps_get_by_name")
  (return-type "GstCaps*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method chain
  (of-object "GstCaps")
  (c-name "gst_caps_chain")
  (return-type "GstCaps*")
  (parameters
  )
  (varargs #t)
)

(define-method append
  (of-object "GstCaps")
  (c-name "gst_caps_append")
  (return-type "GstCaps*")
  (parameters
    '("GstCaps*" "capstoadd")
  )
)

(define-method prepend
  (of-object "GstCaps")
  (c-name "gst_caps_prepend")
  (return-type "GstCaps*")
  (parameters
    '("GstCaps*" "capstoadd")
  )
)

(define-method check_compatibility
  (of-object "GstCaps")
  (c-name "gst_caps_check_compatibility")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "tocaps")
  )
)

(define-method intersect
  (of-object "GstCaps")
  (c-name "gst_caps_intersect")
  (return-type "GstCaps*")
  (parameters
    '("GstCaps*" "caps2")
  )
)

(define-method normalize
  (of-object "GstCaps")
  (c-name "gst_caps_normalize")
  (return-type "GstCaps*")
)

(define-method save_thyself
  (of-object "GstCaps")
  (c-name "gst_caps_save_thyself")
  (return-type "xmlNodePtr")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-function gst_caps_load_thyself
  (c-name "gst_caps_load_thyself")
  (return-type "GstCaps*")
  (parameters
    '("xmlNodePtr" "parent")
  )
)



;; From /usr/include/gst/gstclock.h

(define-function gst_clock_get_type
  (c-name "gst_clock_get_type")
  (return-type "GType")
)

(define-method set_speed
  (of-object "GstClock")
  (c-name "gst_clock_set_speed")
  (return-type "none")
  (parameters
    '("gdouble" "speed")
  )
)

(define-method get_speed
  (of-object "GstClock")
  (c-name "gst_clock_get_speed")
  (return-type "none")
  (parameters
    '("gdouble" "speed")
  )
)

(define-method activate
  (of-object "GstClock")
  (c-name "gst_clock_activate")
  (return-type "none")
  (parameters
    '("gboolean" "active")
  )
)

(define-method is_active
  (of-object "GstClock")
  (c-name "gst_clock_is_active")
  (return-type "gboolean")
)

(define-method reset
  (of-object "GstClock")
  (c-name "gst_clock_reset")
  (return-type "none")
)

(define-method set_time
  (of-object "GstClock")
  (c-name "gst_clock_set_time")
  (return-type "none")
  (parameters
    '("GstClockTime" "time")
  )
)

(define-method get_time
  (of-object "GstClock")
  (c-name "gst_clock_get_time")
  (return-type "GstClockTime")
)

(define-method wait
  (of-object "GstClock")
  (c-name "gst_clock_wait")
  (return-type "GstClockReturn")
  (parameters
    '("GstClockTime" "time")
  )
)

(define-method wait_async
  (of-object "GstClock")
  (c-name "gst_clock_wait_async")
  (return-type "GstClockID")
  (parameters
    '("GstClockTime" "time")
    '("GstClockCallback" "func")
    '("gpointer" "user_data")
  )
)

(define-method cancel_wait_async
  (of-object "GstClock")
  (c-name "gst_clock_cancel_wait_async")
  (return-type "none")
  (parameters
    '("GstClockID" "id")
  )
)

(define-method notify_async
  (of-object "GstClock")
  (c-name "gst_clock_notify_async")
  (return-type "GstClockID")
  (parameters
    '("GstClockTime" "interval")
    '("GstClockCallback" "func")
    '("gpointer" "user_data")
  )
)

(define-method remove_notify_async
  (of-object "GstClock")
  (c-name "gst_clock_remove_notify_async")
  (return-type "none")
  (parameters
    '("GstClockID" "id")
  )
)

(define-method set_resolution
  (of-object "GstClock")
  (c-name "gst_clock_set_resolution")
  (return-type "none")
  (parameters
    '("guint64" "resolution")
  )
)

(define-method get_resolution
  (of-object "GstClock")
  (c-name "gst_clock_get_resolution")
  (return-type "guint64")
)



;; From /usr/include/gst/gstconfig.h



;; From /usr/include/gst/gstcpu.h

(define-function gst_cpu_get_flags
  (c-name "gst_cpu_get_flags")
  (return-type "GstCPUFlags")
)



;; From /usr/include/gst/gstdata.h



;; From /usr/include/gst/gstelement.h

(define-method add_padtemplate
  (of-object "GstElementClass")
  (c-name "gst_element_class_add_padtemplate")
  (return-type "none")
  (parameters
    '("GstPadTemplate*" "templ")
  )
)

(define-function gst_element_get_type
  (c-name "gst_element_get_type")
  (return-type "GType")
)

(define-method set_loop_function
  (of-object "GstElement")
  (c-name "gst_element_set_loop_function")
  (return-type "none")
  (parameters
    '("GstElementLoopFunction" "loop")
  )
)

(define-method set_name
  (of-object "GstElement")
  (c-name "gst_element_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GstElement")
  (c-name "gst_element_get_name")
  (return-type "const-gchar*")
)

(define-method set_parent
  (of-object "GstElement")
  (c-name "gst_element_set_parent")
  (return-type "none")
  (parameters
    '("GstObject*" "parent")
  )
)

(define-method get_parent
  (of-object "GstElement")
  (c-name "gst_element_get_parent")
  (return-type "GstObject*")
)

(define-method get_clock
  (of-object "GstElement")
  (c-name "gst_element_get_clock")
  (return-type "GstClock*")
)

(define-method set_clock
  (of-object "GstElement")
  (c-name "gst_element_set_clock")
  (return-type "none")
  (parameters
    '("GstClock*" "clock")
  )
)

(define-method clock_wait
  (of-object "GstElement")
  (c-name "gst_element_clock_wait")
  (return-type "GstClockReturn")
  (parameters
    '("GstClock*" "clock")
    '("GstClockTime" "time")
  )
)

(define-method yield
  (of-object "GstElement")
  (c-name "gst_element_yield")
  (return-type "none")
)

(define-method interrupt
  (of-object "GstElement")
  (c-name "gst_element_interrupt")
  (return-type "gboolean")
)

(define-method set_sched
  (of-object "GstElement")
  (c-name "gst_element_set_sched")
  (return-type "none")
  (parameters
    '("GstScheduler*" "sched")
  )
)

(define-method get_sched
  (of-object "GstElement")
  (c-name "gst_element_get_sched")
  (return-type "GstScheduler*")
)

(define-method add_pad
  (of-object "GstElement")
  (c-name "gst_element_add_pad")
  (return-type "none")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method remove_pad
  (of-object "GstElement")
  (c-name "gst_element_remove_pad")
  (return-type "none")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method get_pad
  (of-object "GstElement")
  (c-name "gst_element_get_pad")
  (return-type "GstPad*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_pad_list
  (of-object "GstElement")
  (c-name "gst_element_get_pad_list")
  (return-type "GList*")
)

(define-method get_padtemplate_list
  (of-object "GstElement")
  (c-name "gst_element_get_padtemplate_list")
  (return-type "GList*")
)

(define-method get_padtemplate_by_name
  (of-object "GstElement")
  (c-name "gst_element_get_padtemplate_by_name")
  (return-type "GstPadTemplate*")
  (parameters
    '("const-guchar*" "name")
  )
)

(define-method add_ghost_pad
  (of-object "GstElement")
  (c-name "gst_element_add_ghost_pad")
  (return-type "GstPad*")
  (parameters
    '("GstPad*" "pad")
    '("gchar*" "name")
  )
)

(define-method remove_ghost_pad
  (of-object "GstElement")
  (c-name "gst_element_remove_ghost_pad")
  (return-type "none")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method request_compatible_pad
  (of-object "GstElement")
  (c-name "gst_element_request_compatible_pad")
  (return-type "GstPad*")
  (parameters
    '("GstPadTemplate*" "templ")
  )
)

(define-method request_pad_by_name
  (of-object "GstElement")
  (c-name "gst_element_request_pad_by_name")
  (return-type "GstPad*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_compatible_pad_filtered
  (of-object "GstElement")
  (c-name "gst_element_get_compatible_pad_filtered")
  (return-type "GstPad*")
  (parameters
    '("GstPad*" "pad")
    '("GstCaps*" "filtercaps")
  )
)

(define-method get_compatible_pad
  (of-object "GstElement")
  (c-name "gst_element_get_compatible_pad")
  (return-type "GstPad*")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method connect_elements
  (of-object "GstElement")
  (c-name "gst_element_connect_elements")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "dest")
  )
)

(define-method connect_elements_filtered
  (of-object "GstElement")
  (c-name "gst_element_connect_elements_filtered")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "dest")
    '("GstCaps*" "filtercaps")
  )
)

(define-method connect
  (of-object "GstElement")
  (c-name "gst_element_connect")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "srcpadname")
    '("GstElement*" "dest")
    '("const-gchar*" "destpadname")
  )
)

(define-method connect_filtered
  (of-object "GstElement")
  (c-name "gst_element_connect_filtered")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "srcpadname")
    '("GstElement*" "dest")
    '("const-gchar*" "destpadname")
    '("GstCaps*" "filtercaps")
  )
)

(define-method disconnect
  (of-object "GstElement")
  (c-name "gst_element_disconnect")
  (return-type "none")
  (parameters
    '("const-gchar*" "srcpadname")
    '("GstElement*" "dest")
    '("const-gchar*" "destpadname")
  )
)

(define-method disconnect_elements
  (of-object "GstElement")
  (c-name "gst_element_disconnect_elements")
  (return-type "none")
  (parameters
    '("GstElement*" "dest")
  )
)

(define-method connect_elements_many
  (of-object "GstElement")
  (c-name "gst_element_connect_elements_many")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element_2")
  )
  (varargs #t)
)

(define-method set_eos
  (of-object "GstElement")
  (c-name "gst_element_set_eos")
  (return-type "none")
)

(define-method send_event
  (of-object "GstElement")
  (c-name "gst_element_send_event")
  (return-type "none")
  (parameters
    '("GstEvent*" "event")
  )
)

(define-method get_state
  (of-object "GstElement")
  (c-name "gst_element_get_state")
  (return-type "GstElementState")
)

(define-method set_state
  (of-object "GstElement")
  (c-name "gst_element_set_state")
  (return-type "gint")
  (parameters
    '("GstElementState" "state")
  )
)

(define-method wait_state_change
  (of-object "GstElement")
  (c-name "gst_element_wait_state_change")
  (return-type "none")
)

(define-method name
  (of-object "GstElementState")
  (c-name "gst_element_statename")
  (return-type "const-gchar*")
)

(define-method info
  (of-object "GstElement")
  (c-name "gst_element_info")
  (return-type "none")
  (parameters
    '("const-gchar*" "info")
  )
  (varargs #t)
)

(define-method error
  (of-object "GstElement")
  (c-name "gst_element_error")
  (return-type "none")
  (parameters
    '("const-gchar*" "error")
  )
  (varargs #t)
)

(define-method get_factory
  (of-object "GstElement")
  (c-name "gst_element_get_factory")
  (return-type "GstElementFactory*")
)

(define-function gst_element_install_std_props
  (c-name "gst_element_install_std_props")
  (return-type "none")
  (parameters
    '("GstElementClass*" "klass")
    '("const-char*" "first_name")
  )
  (varargs #t)
)

(define-method get_managing_bin
  (of-object "GstElement")
  (c-name "gst_element_get_managing_bin")
  (return-type "GstBin*")
)

(define-function gst_elementfactory_get_type
  (c-name "gst_elementfactory_get_type")
  (return-type "GType")
)

(define-function gst_elementfactory_new
  (c-name "gst_elementfactory_new")
  (return-type "GstElementFactory*")
  (parameters
    '("const-gchar*" "name")
    '("GType" "type")
    '("GstElementDetails*" "details")
  )
)

(define-function gst_elementfactory_find
  (c-name "gst_elementfactory_find")
  (return-type "GstElementFactory*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_elementfactory_get_list
  (c-name "gst_elementfactory_get_list")
  (return-type "const-GList*")
)

(define-method add_padtemplate
  (of-object "GstElementFactory")
  (c-name "gst_elementfactory_add_padtemplate")
  (return-type "none")
  (parameters
    '("GstPadTemplate*" "templ")
  )
)

(define-method can_src_caps
  (of-object "GstElementFactory")
  (c-name "gst_elementfactory_can_src_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method can_sink_caps
  (of-object "GstElementFactory")
  (c-name "gst_elementfactory_can_sink_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method create
  (of-object "GstElementFactory")
  (c-name "gst_elementfactory_create")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_elementfactory_make
  (c-name "gst_elementfactory_make")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "factoryname")
    '("const-gchar*" "name")
  )
)



;; From /usr/include/gst/gstevent.h

(define-function _gst_event_initialize
  (c-name "_gst_event_initialize")
  (return-type "none")
)

(define-function gst_event_new
  (c-name "gst_event_new")
  (return-type "GstEvent*")
  (parameters
    '("GstEventType" "type")
  )
)

(define-method copy
  (of-object "GstEvent")
  (c-name "gst_event_copy")
  (return-type "GstEvent*")
)

(define-method free
  (of-object "GstEvent")
  (c-name "gst_event_free")
  (return-type "none")
)

(define-function gst_event_new_seek
  (c-name "gst_event_new_seek")
  (return-type "GstEvent*")
  (parameters
    '("GstSeekType" "type")
    '("gint64" "offset")
    '("gboolean" "flush")
  )
)

(define-function gst_event_new_info
  (c-name "gst_event_new_info")
  (return-type "GstEvent*")
  (parameters
    '("const-gchar*" "firstname")
  )
  (varargs #t)
)



;; From /usr/include/gst/gstextratypes.h



;; From /usr/include/gst/gstinfo.h

(define-function gst_get_category_name
  (c-name "gst_get_category_name")
  (return-type "const-gchar*")
  (parameters
    '("gint" "category")
  )
)

(define-function gst_default_debug_handler
  (c-name "gst_default_debug_handler")
  (return-type "none")
  (parameters
    '("gint" "category")
    '("gboolean" "incore")
    '("const-gchar*" "file")
    '("const-gchar*" "function")
    '("gint" "line")
    '("const-gchar*" "debug_string")
    '("void*" "element")
    '("gchar*" "string")
  )
)

(define-function gst_info_get_categories
  (c-name "gst_info_get_categories")
  (return-type "guint32")
)

(define-function gst_info_enable_category
  (c-name "gst_info_enable_category")
  (return-type "none")
  (parameters
    '("gint" "category")
  )
)

(define-function gst_info_disable_category
  (c-name "gst_info_disable_category")
  (return-type "none")
  (parameters
    '("gint" "category")
  )
)

(define-function gst_debug_set_categories
  (c-name "gst_debug_set_categories")
  (return-type "none")
  (parameters
    '("guint32" "categories")
  )
)

(define-function gst_debug_get_categories
  (c-name "gst_debug_get_categories")
  (return-type "guint32")
)

(define-function gst_debug_enable_category
  (c-name "gst_debug_enable_category")
  (return-type "none")
  (parameters
    '("gint" "category")
  )
)

(define-function gst_debug_disable_category
  (c-name "gst_debug_disable_category")
  (return-type "none")
  (parameters
    '("gint" "category")
  )
)

(define-function gst_default_error_handler
  (c-name "gst_default_error_handler")
  (return-type "none")
  (parameters
    '("gchar*" "file")
    '("gchar*" "function")
    '("gint" "line")
    '("gchar*" "debug_string")
    '("void*" "element")
    '("void*" "object")
    '("gchar*" "string")
  )
)

(define-function gst_debug_print_stack_trace
  (c-name "gst_debug_print_stack_trace")
  (return-type "none")
)



;; From /usr/include/gst/gstlog.h



;; From /usr/include/gst/gstmarshal.h



;; From /usr/include/gst/gstobject.h

(define-function gst_object_get_type
  (c-name "gst_object_get_type")
  (return-type "GType")
)

(define-method set_name
  (of-object "GstObject")
  (c-name "gst_object_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GstObject")
  (c-name "gst_object_get_name")
  (return-type "const-gchar*")
)

(define-method set_parent
  (of-object "GstObject")
  (c-name "gst_object_set_parent")
  (return-type "none")
  (parameters
    '("GstObject*" "parent")
  )
)

(define-method get_parent
  (of-object "GstObject")
  (c-name "gst_object_get_parent")
  (return-type "GstObject*")
)

(define-method unparent
  (of-object "GstObject")
  (c-name "gst_object_unparent")
  (return-type "none")
)

(define-function gst_object_check_uniqueness
  (c-name "gst_object_check_uniqueness")
  (return-type "gboolean")
  (parameters
    '("GList*" "list")
    '("const-gchar*" "name")
  )
)

(define-method save_thyself
  (of-object "GstObject")
  (c-name "gst_object_save_thyself")
  (return-type "xmlNodePtr")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-method restore_thyself
  (of-object "GstObject")
  (c-name "gst_object_restore_thyself")
  (return-type "none")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-method ref
  (of-object "GstObject")
  (c-name "gst_object_ref")
  (return-type "GstObject*")
)

(define-method unref
  (of-object "GstObject")
  (c-name "gst_object_unref")
  (return-type "none")
)

(define-method sink
  (of-object "GstObject")
  (c-name "gst_object_sink")
  (return-type "none")
)

(define-method destroy
  (of-object "GstObject")
  (c-name "gst_object_destroy")
  (return-type "none")
)

(define-method get_path_string
  (of-object "GstObject")
  (c-name "gst_object_get_path_string")
  (return-type "gchar*")
)

(define-function gst_class_signal_connect
  (c-name "gst_class_signal_connect")
  (return-type "guint")
  (parameters
    '("GstObjectClass*" "klass")
    '("const-gchar*" "name")
    '("gpointer" "func")
    '("gpointer" "func_data")
  )
)

(define-function gst_class_signal_emit_by_name
  (c-name "gst_class_signal_emit_by_name")
  (return-type "none")
  (parameters
    '("GstObject*" "object")
    '("const-gchar*" "name")
    '("xmlNodePtr" "self")
  )
)



;; From /usr/include/gst/gstpad.h

(define-function gst_real_pad_get_type
  (c-name "gst_real_pad_get_type")
  (return-type "GType")
)

(define-function gst_ghost_pad_get_type
  (c-name "gst_ghost_pad_get_type")
  (return-type "GType")
)

(define-function gst_pad_new
  (c-name "gst_pad_new")
  (return-type "GstPad*")
  (parameters
    '("gchar*" "name")
    '("GstPadDirection" "direction")
  )
)

(define-function gst_pad_new_from_template
  (c-name "gst_pad_new_from_template")
  (return-type "GstPad*")
  (parameters
    '("GstPadTemplate*" "templ")
    '("gchar*" "name")
  )
)

(define-method get_direction
  (of-object "GstPad")
  (c-name "gst_pad_get_direction")
  (return-type "GstPadDirection")
)

(define-method set_chain_function
  (of-object "GstPad")
  (c-name "gst_pad_set_chain_function")
  (return-type "none")
  (parameters
    '("GstPadChainFunction" "chain")
  )
)

(define-method set_get_function
  (of-object "GstPad")
  (c-name "gst_pad_set_get_function")
  (return-type "none")
  (parameters
    '("GstPadGetFunction" "get")
  )
)

(define-method set_event_function
  (of-object "GstPad")
  (c-name "gst_pad_set_event_function")
  (return-type "none")
  (parameters
    '("GstPadEventFunction" "event")
  )
)

(define-method set_getregion_function
  (of-object "GstPad")
  (c-name "gst_pad_set_getregion_function")
  (return-type "none")
  (parameters
    '("GstPadGetRegionFunction" "getregion")
  )
)

(define-method set_connect_function
  (of-object "GstPad")
  (c-name "gst_pad_set_connect_function")
  (return-type "none")
  (parameters
    '("GstPadConnectFunction" "connect")
  )
)

(define-method set_getcaps_function
  (of-object "GstPad")
  (c-name "gst_pad_set_getcaps_function")
  (return-type "none")
  (parameters
    '("GstPadGetCapsFunction" "getcaps")
  )
)

(define-method set_bufferpool_function
  (of-object "GstPad")
  (c-name "gst_pad_set_bufferpool_function")
  (return-type "none")
  (parameters
    '("GstPadBufferPoolFunction" "bufpool")
  )
)

(define-method get_caps
  (of-object "GstPad")
  (c-name "gst_pad_get_caps")
  (return-type "GstCaps*")
)

(define-method get_padtemplate_caps
  (of-object "GstPad")
  (c-name "gst_pad_get_padtemplate_caps")
  (return-type "GstCaps*")
)

(define-method try_set_caps
  (of-object "GstPad")
  (c-name "gst_pad_try_set_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method check_compatibility
  (of-object "GstPad")
  (c-name "gst_pad_check_compatibility")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
  )
)

(define-method set_element_private
  (of-object "GstPad")
  (c-name "gst_pad_set_element_private")
  (return-type "none")
  (parameters
    '("gpointer" "priv")
  )
)

(define-method get_element_private
  (of-object "GstPad")
  (c-name "gst_pad_get_element_private")
  (return-type "gpointer")
)

(define-method set_name
  (of-object "GstPad")
  (c-name "gst_pad_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GstPad")
  (c-name "gst_pad_get_name")
  (return-type "const-gchar*")
)

(define-method set_parent
  (of-object "GstPad")
  (c-name "gst_pad_set_parent")
  (return-type "none")
  (parameters
    '("GstObject*" "parent")
  )
)

(define-method get_parent
  (of-object "GstPad")
  (c-name "gst_pad_get_parent")
  (return-type "GstElement*")
)

(define-method get_real_parent
  (of-object "GstPad")
  (c-name "gst_pad_get_real_parent")
  (return-type "GstElement*")
)

(define-method set_sched
  (of-object "GstPad")
  (c-name "gst_pad_set_sched")
  (return-type "none")
  (parameters
    '("GstScheduler*" "sched")
  )
)

(define-method get_sched
  (of-object "GstPad")
  (c-name "gst_pad_get_sched")
  (return-type "GstScheduler*")
)

(define-method unset_sched
  (of-object "GstPad")
  (c-name "gst_pad_unset_sched")
  (return-type "none")
)

(define-method add_ghost_pad
  (of-object "GstPad")
  (c-name "gst_pad_add_ghost_pad")
  (return-type "none")
  (parameters
    '("GstPad*" "ghostpad")
  )
)

(define-method remove_ghost_pad
  (of-object "GstPad")
  (c-name "gst_pad_remove_ghost_pad")
  (return-type "none")
  (parameters
    '("GstPad*" "ghostpad")
  )
)

(define-method get_ghost_pad_list
  (of-object "GstPad")
  (c-name "gst_pad_get_ghost_pad_list")
  (return-type "GList*")
)

(define-method get_padtemplate
  (of-object "GstPad")
  (c-name "gst_pad_get_padtemplate")
  (return-type "GstPadTemplate*")
)

(define-method get_peer
  (of-object "GstPad")
  (c-name "gst_pad_get_peer")
  (return-type "GstPad*")
)

(define-method get_bufferpool
  (of-object "GstPad")
  (c-name "gst_pad_get_bufferpool")
  (return-type "GstBufferPool*")
)

(define-method can_connect
  (of-object "GstPad")
  (c-name "gst_pad_can_connect")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
  )
)

(define-method can_connect_filtered
  (of-object "GstPad")
  (c-name "gst_pad_can_connect_filtered")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
    '("GstCaps*" "filtercaps")
  )
)

(define-method connect
  (of-object "GstPad")
  (c-name "gst_pad_connect")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
  )
)

(define-method connect_filtered
  (of-object "GstPad")
  (c-name "gst_pad_connect_filtered")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
    '("GstCaps*" "filtercaps")
  )
)

(define-method disconnect
  (of-object "GstPad")
  (c-name "gst_pad_disconnect")
  (return-type "none")
  (parameters
    '("GstPad*" "sinkpad")
  )
)

(define-method proxy_connect
  (of-object "GstPad")
  (c-name "gst_pad_proxy_connect")
  (return-type "GstPadConnectReturn")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method reconnect_filtered
  (of-object "GstPad")
  (c-name "gst_pad_reconnect_filtered")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
    '("GstCaps*" "filtercaps")
  )
)

(define-method perform_negotiate
  (of-object "GstPad")
  (c-name "gst_pad_perform_negotiate")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
  )
)

(define-method try_reconnect_filtered
  (of-object "GstPad")
  (c-name "gst_pad_try_reconnect_filtered")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "sinkpad")
    '("GstCaps*" "filtercaps")
  )
)

(define-method get_allowed_caps
  (of-object "GstPad")
  (c-name "gst_pad_get_allowed_caps")
  (return-type "GstCaps*")
)

(define-method recalc_allowed_caps
  (of-object "GstPad")
  (c-name "gst_pad_recalc_allowed_caps")
  (return-type "gboolean")
)

(define-method push
  (of-object "GstPad")
  (c-name "gst_pad_push")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buf")
  )
)

(define-method pullregion
  (of-object "GstPad")
  (c-name "gst_pad_pullregion")
  (return-type "GstBuffer*")
  (parameters
    '("GstRegionType" "type")
    '("guint64" "offset")
    '("guint64" "len")
  )
)

(define-method event_default
  (of-object "GstPad")
  (c-name "gst_pad_event_default")
  (return-type "none")
  (parameters
    '("GstEvent*" "event")
  )
)

(define-method peek
  (of-object "GstPad")
  (c-name "gst_pad_peek")
  (return-type "GstBuffer*")
)

(define-function gst_pad_select
  (c-name "gst_pad_select")
  (return-type "GstPad*")
  (parameters
    '("GList*" "padlist")
  )
)

(define-method selectv
  (of-object "GstPad")
  (c-name "gst_pad_selectv")
  (return-type "GstPad*")
  (parameters
  )
  (varargs #t)
)

(define-function gst_pad_load_and_connect
  (c-name "gst_pad_load_and_connect")
  (return-type "none")
  (parameters
    '("xmlNodePtr" "self")
    '("GstObject*" "parent")
  )
)

(define-function gst_ghost_pad_new
  (c-name "gst_ghost_pad_new")
  (return-type "GstPad*")
  (parameters
    '("gchar*" "name")
    '("GstPad*" "pad")
  )
)

(define-function gst_padtemplate_get_type
  (c-name "gst_padtemplate_get_type")
  (return-type "GType")
)

(define-function gst_padtemplate_new
  (c-name "gst_padtemplate_new")
  (return-type "GstPadTemplate*")
  (parameters
    '("gchar*" "name_template")
    '("GstPadDirection" "direction")
    '("GstPadPresence" "presence")
    '("GstCaps*" "caps")
  )
  (varargs #t)
)

(define-method get_caps
  (of-object "GstPadTemplate")
  (c-name "gst_padtemplate_get_caps")
  (return-type "GstCaps*")
)

(define-method get_caps_by_name
  (of-object "GstPadTemplate")
  (c-name "gst_padtemplate_get_caps_by_name")
  (return-type "GstCaps*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method save_thyself
  (of-object "GstPadTemplate")
  (c-name "gst_padtemplate_save_thyself")
  (return-type "xmlNodePtr")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-function gst_padtemplate_load_thyself
  (c-name "gst_padtemplate_load_thyself")
  (return-type "GstPadTemplate*")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-method ghost_save_thyself
  (of-object "GstPad")
  (c-name "gst_pad_ghost_save_thyself")
  (return-type "xmlNodePtr")
  (parameters
    '("GstElement*" "bin")
    '("xmlNodePtr" "parent")
  )
)



;; From /usr/include/gst/gstparse.h

(define-function gst_parse_launchv
  (c-name "gst_parse_launchv")
  (return-type "GstPipeline*")
  (parameters
    '("const-gchar**" "argv")
  )
)



;; From /usr/include/gst/gstpipeline.h

(define-function gst_pipeline_get_type
  (c-name "gst_pipeline_get_type")
  (return-type "GType")
)

(define-function gst_pipeline_new
  (c-name "gst_pipeline_new")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From /usr/include/gst/gstplugin.h

(define-function _gst_plugin_register_static
  (c-name "_gst_plugin_register_static")
  (return-type "none")
  (parameters
    '("GstPluginDesc*" "desc")
  )
)

(define-function gst_plugin_add_path
  (c-name "gst_plugin_add_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method get_name
  (of-object "GstPlugin")
  (c-name "gst_plugin_get_name")
  (return-type "const-gchar*")
)

(define-method set_name
  (of-object "GstPlugin")
  (c-name "gst_plugin_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_longname
  (of-object "GstPlugin")
  (c-name "gst_plugin_get_longname")
  (return-type "const-gchar*")
)

(define-method set_longname
  (of-object "GstPlugin")
  (c-name "gst_plugin_set_longname")
  (return-type "none")
  (parameters
    '("const-gchar*" "longname")
  )
)

(define-method get_filename
  (of-object "GstPlugin")
  (c-name "gst_plugin_get_filename")
  (return-type "const-gchar*")
)

(define-method is_loaded
  (of-object "GstPlugin")
  (c-name "gst_plugin_is_loaded")
  (return-type "gboolean")
)

(define-method get_feature_list
  (of-object "GstPlugin")
  (c-name "gst_plugin_get_feature_list")
  (return-type "GList*")
)

(define-function gst_plugin_load_all
  (c-name "gst_plugin_load_all")
  (return-type "none")
)

(define-function gst_plugin_unload_all
  (c-name "gst_plugin_unload_all")
  (return-type "none")
)

(define-function gst_plugin_load
  (c-name "gst_plugin_load")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_plugin_load_absolute
  (c-name "gst_plugin_load_absolute")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_library_load
  (c-name "gst_library_load")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method load_plugin
  (of-object "GstPlugin")
  (c-name "gst_plugin_load_plugin")
  (return-type "gboolean")
)

(define-method add_feature
  (of-object "GstPlugin")
  (c-name "gst_plugin_add_feature")
  (return-type "none")
  (parameters
    '("GstPluginFeature*" "feature")
  )
)

(define-function gst_plugin_find
  (c-name "gst_plugin_find")
  (return-type "GstPlugin*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_plugin_get_list
  (c-name "gst_plugin_get_list")
  (return-type "GList*")
)

(define-function gst_plugin_save_thyself
  (c-name "gst_plugin_save_thyself")
  (return-type "xmlNodePtr")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-function gst_plugin_load_thyself
  (c-name "gst_plugin_load_thyself")
  (return-type "none")
  (parameters
    '("xmlNodePtr" "parent")
  )
)



;; From /usr/include/gst/gstpluginfeature.h

(define-function gst_plugin_feature_get_type
  (c-name "gst_plugin_feature_get_type")
  (return-type "GType")
)

(define-method ensure_loaded
  (of-object "GstPluginFeature")
  (c-name "gst_plugin_feature_ensure_loaded")
  (return-type "gboolean")
)

(define-method unload_thyself
  (of-object "GstPluginFeature")
  (c-name "gst_plugin_feature_unload_thyself")
  (return-type "none")
)



;; From /usr/include/gst/gstprops.h

(define-function _gst_props_initialize
  (c-name "_gst_props_initialize")
  (return-type "none")
)

(define-function gst_props_new
  (c-name "gst_props_new")
  (return-type "GstProps*")
  (parameters
    '("const-gchar*" "firstname")
  )
  (varargs #t)
)

(define-function gst_props_newv
  (c-name "gst_props_newv")
  (return-type "GstProps*")
  (parameters
    '("const-gchar*" "firstname")
    '("va_list" "var_args")
  )
)

(define-method unref
  (of-object "GstProps")
  (c-name "gst_props_unref")
  (return-type "none")
)

(define-method ref
  (of-object "GstProps")
  (c-name "gst_props_ref")
  (return-type "none")
)

(define-method destroy
  (of-object "GstProps")
  (c-name "gst_props_destroy")
  (return-type "none")
)

(define-method debug
  (of-object "GstProps")
  (c-name "gst_props_debug")
  (return-type "none")
)

(define-method copy
  (of-object "GstProps")
  (c-name "gst_props_copy")
  (return-type "GstProps*")
)

(define-method copy_on_write
  (of-object "GstProps")
  (c-name "gst_props_copy_on_write")
  (return-type "GstProps*")
)

(define-method merge
  (of-object "GstProps")
  (c-name "gst_props_merge")
  (return-type "GstProps*")
  (parameters
    '("GstProps*" "tomerge")
  )
)

(define-method check_compatibility
  (of-object "GstProps")
  (c-name "gst_props_check_compatibility")
  (return-type "gboolean")
  (parameters
    '("GstProps*" "toprops")
  )
)

(define-method intersect
  (of-object "GstProps")
  (c-name "gst_props_intersect")
  (return-type "GstProps*")
  (parameters
    '("GstProps*" "props2")
  )
)

(define-method normalize
  (of-object "GstProps")
  (c-name "gst_props_normalize")
  (return-type "GList*")
)

(define-method set
  (of-object "GstProps")
  (c-name "gst_props_set")
  (return-type "GstProps*")
  (parameters
    '("const-gchar*" "name")
  )
  (varargs #t)
)

(define-method has_property
  (of-object "GstProps")
  (c-name "gst_props_has_property")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_int
  (of-object "GstProps")
  (c-name "gst_props_get_int")
  (return-type "gint")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_float
  (of-object "GstProps")
  (c-name "gst_props_get_float")
  (return-type "gfloat")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_fourcc_int
  (of-object "GstProps")
  (c-name "gst_props_get_fourcc_int")
  (return-type "gulong")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_boolean
  (of-object "GstProps")
  (c-name "gst_props_get_boolean")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_string
  (of-object "GstProps")
  (c-name "gst_props_get_string")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method save_thyself
  (of-object "GstProps")
  (c-name "gst_props_save_thyself")
  (return-type "xmlNodePtr")
  (parameters
    '("xmlNodePtr" "parent")
  )
)

(define-function gst_props_load_thyself
  (c-name "gst_props_load_thyself")
  (return-type "GstProps*")
  (parameters
    '("xmlNodePtr" "parent")
  )
)



;; From /usr/include/gst/gstqueue.h

(define-function gst_queue_get_type
  (c-name "gst_queue_get_type")
  (return-type "GType")
)



;; From /usr/include/gst/gstscheduler.h

(define-function gst_scheduler_get_type
  (c-name "gst_scheduler_get_type")
  (return-type "GType")
)

(define-method setup
  (of-object "GstScheduler")
  (c-name "gst_scheduler_setup")
  (return-type "none")
)

(define-method reset
  (of-object "GstScheduler")
  (c-name "gst_scheduler_reset")
  (return-type "none")
)

(define-method add_element
  (of-object "GstScheduler")
  (c-name "gst_scheduler_add_element")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method remove_element
  (of-object "GstScheduler")
  (c-name "gst_scheduler_remove_element")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method state_transition
  (of-object "GstScheduler")
  (c-name "gst_scheduler_state_transition")
  (return-type "GstElementStateReturn")
  (parameters
    '("GstElement*" "element")
    '("gint" "transition")
  )
)

(define-method lock_element
  (of-object "GstScheduler")
  (c-name "gst_scheduler_lock_element")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method unlock_element
  (of-object "GstScheduler")
  (c-name "gst_scheduler_unlock_element")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method yield
  (of-object "GstScheduler")
  (c-name "gst_scheduler_yield")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method interrupt
  (of-object "GstScheduler")
  (c-name "gst_scheduler_interrupt")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method error
  (of-object "GstScheduler")
  (c-name "gst_scheduler_error")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method pad_connect
  (of-object "GstScheduler")
  (c-name "gst_scheduler_pad_connect")
  (return-type "none")
  (parameters
    '("GstPad*" "srcpad")
    '("GstPad*" "sinkpad")
  )
)

(define-method pad_disconnect
  (of-object "GstScheduler")
  (c-name "gst_scheduler_pad_disconnect")
  (return-type "none")
  (parameters
    '("GstPad*" "srcpad")
    '("GstPad*" "sinkpad")
  )
)

(define-method pad_select
  (of-object "GstScheduler")
  (c-name "gst_scheduler_pad_select")
  (return-type "GstPad*")
  (parameters
    '("GList*" "padlist")
  )
)

(define-method iterate
  (of-object "GstScheduler")
  (c-name "gst_scheduler_iterate")
  (return-type "gboolean")
)

(define-method show
  (of-object "GstScheduler")
  (c-name "gst_scheduler_show")
  (return-type "none")
)

(define-function gst_schedulerfactory_get_type
  (c-name "gst_schedulerfactory_get_type")
  (return-type "GType")
)

(define-function gst_schedulerfactory_new
  (c-name "gst_schedulerfactory_new")
  (return-type "GstSchedulerFactory*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "longdesc")
    '("GType" "type")
  )
)

(define-method destroy
  (of-object "GstSchedulerFactory")
  (c-name "gst_schedulerfactory_destroy")
  (return-type "none")
)

(define-function gst_schedulerfactory_find
  (c-name "gst_schedulerfactory_find")
  (return-type "GstSchedulerFactory*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_schedulerfactory_get_list
  (c-name "gst_schedulerfactory_get_list")
  (return-type "GList*")
)

(define-method create
  (of-object "GstSchedulerFactory")
  (c-name "gst_schedulerfactory_create")
  (return-type "GstScheduler*")
  (parameters
    '("GstElement*" "parent")
  )
)

(define-function gst_schedulerfactory_make
  (c-name "gst_schedulerfactory_make")
  (return-type "GstScheduler*")
  (parameters
    '("const-gchar*" "name")
    '("GstElement*" "parent")
  )
)

(define-function gst_schedulerfactory_set_default_name
  (c-name "gst_schedulerfactory_set_default_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_schedulerfactory_get_default_name
  (c-name "gst_schedulerfactory_get_default_name")
  (return-type "const-gchar*")
)



;; From /usr/include/gst/gstsystemclock.h

(define-function gst_system_clock_get_type
  (c-name "gst_system_clock_get_type")
  (return-type "GType")
)

(define-function gst_system_clock_obtain
  (c-name "gst_system_clock_obtain")
  (return-type "GstClock*")
)



;; From /usr/include/gst/gstthread.h

(define-function gst_thread_get_type
  (c-name "gst_thread_get_type")
  (return-type "GType")
)

(define-function gst_thread_new
  (c-name "gst_thread_new")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From /usr/include/gst/gsttimecache.h

(define-function gst_timecache_get_type
  (c-name "gst_timecache_get_type")
  (return-type "GType")
)

(define-function gst_timecache_new
  (c-name "gst_timecache_new")
  (return-type "GstTimeCache*")
)

(define-method get_group
  (of-object "GstTimeCache")
  (c-name "gst_timecache_get_group")
  (return-type "gint")
)

(define-method new_group
  (of-object "GstTimeCache")
  (c-name "gst_timecache_new_group")
  (return-type "gint")
)

(define-method set_group
  (of-object "GstTimeCache")
  (c-name "gst_timecache_set_group")
  (return-type "gboolean")
  (parameters
    '("gint" "groupnum")
  )
)

(define-method set_certainty
  (of-object "GstTimeCache")
  (c-name "gst_timecache_set_certainty")
  (return-type "none")
  (parameters
    '("GstTimeCacheCertainty" "certainty")
  )
)

(define-method get_certainty
  (of-object "GstTimeCache")
  (c-name "gst_timecache_get_certainty")
  (return-type "GstTimeCacheCertainty")
)

(define-method add_entry
  (of-object "GstTimeCache")
  (c-name "gst_timecache_add_entry")
  (return-type "none")
  (parameters
    '("guint64" "location")
    '("gint64" "timestamp")
  )
)

(define-method find_location
  (of-object "GstTimeCache")
  (c-name "gst_timecache_find_location")
  (return-type "gboolean")
  (parameters
    '("guint64" "location")
    '("gint64*" "timestamp")
  )
)

(define-method find_timestamp
  (of-object "GstTimeCache")
  (c-name "gst_timecache_find_timestamp")
  (return-type "gboolean")
  (parameters
    '("gint64" "timestamp")
    '("guint64*" "location")
  )
)



;; From /usr/include/gst/gsttrace.h

(define-function gst_trace_new
  (c-name "gst_trace_new")
  (return-type "GstTrace*")
  (parameters
    '("guchar*" "filename")
    '("gint" "size")
  )
)

(define-method destroy
  (of-object "GstTrace")
  (c-name "gst_trace_destroy")
  (return-type "none")
)

(define-method flush
  (of-object "GstTrace")
  (c-name "gst_trace_flush")
  (return-type "none")
)

(define-method text_flush
  (of-object "GstTrace")
  (c-name "gst_trace_text_flush")
  (return-type "none")
)

(define-method set_default
  (of-object "GstTrace")
  (c-name "gst_trace_set_default")
  (return-type "none")
)

(define-method _add_entry
  (of-object "GstTrace")
  (c-name "_gst_trace_add_entry")
  (return-type "none")
  (parameters
    '("guint32" "seq")
    '("guint32" "data")
    '("gchar*" "msg")
  )
)

(define-function gst_trace_read_tsc
  (c-name "gst_trace_read_tsc")
  (return-type "none")
  (parameters
    '("guint64*" "dst")
  )
)



;; From /usr/include/gst/gsttype.h

(define-function gst_typefactory_get_type
  (c-name "gst_typefactory_get_type")
  (return-type "GType")
)

(define-function gst_typefactory_new
  (c-name "gst_typefactory_new")
  (return-type "GstTypeFactory*")
  (parameters
    '("GstTypeDefinition*" "definition")
  )
)

(define-function gst_typefactory_find
  (c-name "gst_typefactory_find")
  (return-type "GstTypeFactory*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gst_typefactory_get_list
  (c-name "gst_typefactory_get_list")
  (return-type "GList*")
)

(define-function gst_type_register
  (c-name "gst_type_register")
  (return-type "guint16")
  (parameters
    '("GstTypeFactory*" "factory")
  )
)

(define-function gst_type_find_by_mime
  (c-name "gst_type_find_by_mime")
  (return-type "guint16")
  (parameters
    '("const-gchar*" "mime")
  )
)

(define-function gst_type_find_by_ext
  (c-name "gst_type_find_by_ext")
  (return-type "guint16")
  (parameters
    '("const-gchar*" "ext")
  )
)

(define-function gst_type_find_by_id
  (c-name "gst_type_find_by_id")
  (return-type "GstType*")
  (parameters
    '("guint16" "id")
  )
)

(define-function gst_type_get_list
  (c-name "gst_type_get_list")
  (return-type "GList*")
)



;; From /usr/include/gst/gsttypefind.h

(define-function gst_typefind_get_type
  (c-name "gst_typefind_get_type")
  (return-type "GType")
)



;; From /usr/include/gst/gsttypes.h



;; From /usr/include/gst/gstutils.h

(define-function gst_util_get_int_arg
  (c-name "gst_util_get_int_arg")
  (return-type "gint")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_bool_arg
  (c-name "gst_util_get_bool_arg")
  (return-type "gboolean")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_long_arg
  (c-name "gst_util_get_long_arg")
  (return-type "glong")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_int64_arg
  (c-name "gst_util_get_int64_arg")
  (return-type "gint64")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_float_arg
  (c-name "gst_util_get_float_arg")
  (return-type "gfloat")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_double_arg
  (c-name "gst_util_get_double_arg")
  (return-type "gdouble")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_string_arg
  (c-name "gst_util_get_string_arg")
  (return-type "const-gchar*")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_get_pointer_arg
  (c-name "gst_util_get_pointer_arg")
  (return-type "gpointer")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "argname")
  )
)

(define-function gst_util_set_value_from_string
  (c-name "gst_util_set_value_from_string")
  (return-type "none")
  (parameters
    '("GValue*" "value")
    '("const-gchar*" "value_str")
  )
)

(define-function gst_util_set_object_arg
  (c-name "gst_util_set_object_arg")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "name")
    '("const-gchar*" "value")
  )
)

(define-function gst_util_dump_mem
  (c-name "gst_util_dump_mem")
  (return-type "none")
  (parameters
    '("guchar*" "mem")
    '("guint" "size")
  )
)

(define-function gst_print_pad_caps
  (c-name "gst_print_pad_caps")
  (return-type "none")
  (parameters
    '("GString*" "buf")
    '("gint" "indent")
    '("GstPad*" "pad")
  )
)

(define-function gst_print_element_args
  (c-name "gst_print_element_args")
  (return-type "none")
  (parameters
    '("GString*" "buf")
    '("gint" "indent")
    '("GstElement*" "element")
  )
)



;; From /usr/include/gst/gstversion.h



;; From /usr/include/gst/gstxml.h

(define-function gst_xml_get_type
  (c-name "gst_xml_get_type")
  (return-type "GType")
)

(define-function gst_xml_write
  (c-name "gst_xml_write")
  (return-type "xmlDocPtr")
  (parameters
    '("GstElement*" "element")
  )
)

(define-function gst_xml_write_file
  (c-name "gst_xml_write_file")
  (return-type "gint")
  (parameters
    '("GstElement*" "element")
    '("FILE*" "out")
  )
)

(define-function gst_xml_new
  (c-name "gst_xml_new")
  (return-type "GstXML*")
)

(define-method parse_doc
  (of-object "GstXML")
  (c-name "gst_xml_parse_doc")
  (return-type "gboolean")
  (parameters
    '("xmlDocPtr" "doc")
    '("const-guchar*" "root")
  )
)

(define-method parse_file
  (of-object "GstXML")
  (c-name "gst_xml_parse_file")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "fname")
    '("const-guchar*" "root")
  )
)

(define-method parse_memory
  (of-object "GstXML")
  (c-name "gst_xml_parse_memory")
  (return-type "gboolean")
  (parameters
    '("guchar*" "buffer")
    '("guint" "size")
    '("const-gchar*" "root")
  )
)

(define-method get_element
  (of-object "GstXML")
  (c-name "gst_xml_get_element")
  (return-type "GstElement*")
  (parameters
    '("const-guchar*" "name")
  )
)

(define-method get_topelements
  (of-object "GstXML")
  (c-name "gst_xml_get_topelements")
  (return-type "GList*")
)

(define-function gst_xml_make_element
  (c-name "gst_xml_make_element")
  (return-type "GstElement*")
  (parameters
    '("xmlNodePtr" "cur")
    '("GstObject*" "parent")
  )
)


