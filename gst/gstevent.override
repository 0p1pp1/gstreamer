/* -*- Mode: C; ; c-file-style: "python" -*- */
/* gst-python
 * Copyright (C) 2005 Edward Hervey
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 * 
 * Author: Johan Dahlin <johan@gnome.org>
 */
%%
override gst_event_discont_get_value kwargs
static PyObject *
_wrap_gst_event_discont_get_value(PyGstMiniObject *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = { "format", NULL};
	PyObject *pformat;
	GstFormat	format;
	gint64	start, end;
	PyObject	*ret;

	if (!PyArg_ParseTupleAndKeywords(args, kwargs,
					 "O:GstEvent.discont_get_value",
					 kwlist, &pformat))
		return NULL;
	if (pyg_enum_get_value (GST_TYPE_FORMAT, pformat, (gint *) &format)) {
		PyErr_SetString(PyExc_TypeError, "argument should be a GstFormat");
		return NULL;
	}
	if (GST_EVENT_TYPE(self->obj) != GST_EVENT_DISCONTINUOUS) {
		PyErr_SetString(PyExc_TypeError, "Event is not a discontinuous event");
		return NULL;
	}
	if (!gst_event_discont_get_value(GST_EVENT (self->obj), format,
					 &start, &end)) {
		Py_INCREF (Py_None);
		return Py_None;
	}
	
	ret = PyList_New(0);
	PyList_Append(ret, PyLong_FromLongLong(start));
	PyList_Append(ret, PyLong_FromLongLong(end));
	
	return ret;
}
%%
override gst_event_get_structure noargs
static PyObject *
_wrap_gst_event_get_structure(PyGstMiniObject *self)
{
    GstStructure *ret;

    ret = (GstStructure *) gst_event_get_structure(GST_EVENT(self->obj));
    /* pyg_boxed_new handles NULL checking */
    return pyg_boxed_new(GST_TYPE_STRUCTURE, ret, TRUE, TRUE);
}
