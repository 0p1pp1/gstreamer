/* -*- Mode: C; ; c-file-style: "python" -*- */
/* gst-python
 * Copyright (C) 2004 Johan Dahlin
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 * 
 * Author: Johan Dahlin <johan@gnome.org>
 */

%%
ignore
  gst_bin_get_by_name_recurse_up
%%
override gst_bin_add_many args
static PyObject *
_wrap_gst_bin_add_many(PyGObject *self, PyObject *args)
{
	PyGObject *element;
	int i, len;

	len = PyTuple_Size(args);
	if (len == 0) {
		PyErr_SetString(PyExc_TypeError, "GstBin.add_many requires at least one argument");
		return NULL;
	}
       
    
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		if (!pygobject_check(element, &PyGstElement_Type))
		{
			PyErr_SetString(PyExc_TypeError, "argument must be a GstElement");
			return NULL;
		}
	}
	
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		gst_bin_add(GST_BIN(self->obj), GST_ELEMENT(element->obj));
	}

	Py_INCREF(Py_None);
	return Py_None;
}
%%
override gst_bin_remove_many args
static PyObject *
_wrap_gst_bin_remove_many(PyGObject *self, PyObject *args)
{
	PyGObject *element;
	int i, len;

	len = PyTuple_Size(args);
	if (len == 0) {
		PyErr_SetString(PyExc_TypeError, "GstBin.remove_many requires at least one argument");
		return NULL;
	}
       
    
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		if (!pygobject_check(element, &PyGstElement_Type))
		{
			PyErr_SetString(PyExc_TypeError, "argument must be a GstElement");
			return NULL;
		}
	}
	
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		gst_bin_remove(GST_BIN(self->obj), GST_ELEMENT(element->obj));
	}

	Py_INCREF(Py_None);
	return Py_None;
}
%%
override gst_bin_iterate noargs
static PyObject *
_wrap_gst_bin_iterate(PyGObject *self)
{
	int ret;

/* XXX: Find out which one is the most correct */
#if 1	
        pyg_begin_allow_threads;

	ret = gst_bin_iterate(GST_BIN(self->obj));
	
        pyg_end_allow_threads;

#else
	PyGILState_STATE state;
	
        state = pyg_gil_state_ensure();
	ret = gst_bin_iterate(GST_BIN(self->obj));
	pyg_gil_state_release(state);
#endif	
	return PyInt_FromLong(ret);
}
%%
override gst_bin_get_list noargs
static PyObject *
_wrap_gst_bin_get_list(PyGObject *self)
{
	GList *elements, *l;
	PyObject *tuple;
	int i;
	
	elements = (GList*)gst_bin_get_list(GST_BIN(self->obj));
	tuple = PyTuple_New(g_list_length(elements));
	for (i = 0, l = elements; l; l = l->next, i++) {
		GstElement *element = (GstElement*)l->data;
		if (!element)
			continue;
		PyTuple_SetItem(tuple, i, pygstobject_new(G_OBJECT(element)));
	}
		
	return tuple;
}
%%
override gst_bin_get_by_name kwargs
static PyObject *
_wrap_gst_bin_get_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "recurse", NULL };
    char *name;
    gboolean recurse = FALSE;
    GstElement *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s|b:GstBin.get_by_name",
				     kwlist, &name, &recurse))
        return NULL;
    
    if (recurse)
	    ret = gst_bin_get_by_name_recurse_up(GST_BIN(self->obj), name);
    else
	    ret = gst_bin_get_by_name(GST_BIN(self->obj), name);
    
    /* pygobject_new handles NULL checking */
    return pygstobject_new((GObject *)ret);
}
