/* -*- Mode: C; c-basic-offset: 4 -*- */
/* gst-python
 * Copyright (C) 2004 David I. Lehn
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 * 
 * Author: David I. Lehn <dlehn@users.sourceforge.net>
 */
%%
headers
#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include "common.h"

#include <gst/gst.h>
#include <gst/colorbalance/colorbalance.h>
#include <gst/colorbalance/colorbalancechannel.h>
#include <gst/mixer/mixer.h>
#include <gst/mixer/mixertrack.h>
#include <gst/navigation/navigation.h>
#include <gst/propertyprobe/propertyprobe.h>
#include <gst/tuner/tuner.h>
#include <gst/xwindowlistener/xwindowlistener.h>

%%
modulename gst.interfaces
%%
import gobject.GObject as PyGObject_Type
import gst.Object as PyGstObject_Type
import gst.Structure as PyGstStructure_Type
import gst.Element as PyGstElement_Type
%%
include
  xoverlay.override
%%
ignore-glob
 _*
 gstinterfaces_*init
 *_get_type
%%
override gst_tuner_list_channels noargs
static PyObject *
_wrap_gst_tuner_list_channels(PyGObject *self)
{
    const GList *l, *list;
    PyObject *py_list;
	
    list = gst_tuner_list_channels(GST_TUNER(self->obj));
    
    py_list = PyList_New(0);
    for (l = list; l; l = l->next) {
	GstTunerChannel *channel = (GstTunerChannel*)l->data;
	PyList_Append(py_list, pygobject_new(G_OBJECT(channel)));
    }
		
    return py_list;
}
%%
override gst_tuner_list_norms noargs
static PyObject *
_wrap_gst_tuner_list_norms(PyGObject *self)
{
    const GList *l, *list;
    PyObject *py_list;
	
    list = gst_tuner_list_norms(GST_TUNER(self->obj));
    
    py_list = PyList_New(0);
    for (l = list; l; l = l->next) {
	GstTunerNorm *norm = (GstTunerNorm*)l->data;
	PyList_Append(py_list, pygobject_new(G_OBJECT(norm)));
    }
		
    return py_list;
}
