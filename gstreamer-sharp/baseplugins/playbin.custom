[Gst.GLib.Property ("stream-info-value-array") ]
public StreamInfo[] StreamInfos {
  get {
    Gst.GLib.Value val = GetProperty ("stream-info-value-array");
    Gst.GLib.ValueArray va = (Gst.GLib.ValueArray) val;
    StreamInfo[] ret = new StreamInfo[va.Count];
    for (int i = 0; i < va.Count; i++)
      ret[i] = (StreamInfo) va[i];

    va.Dispose ();
    val.Dispose ();
    return ret;
  }
}

public class StreamInfo : Gst.GLib.Object {

  [Gst.GLib.Property ("object") ]
  public Gst.Object Object {
    get {
      Gst.GLib.Value val = GetProperty ("object");
      Gst.Object ret = (Gst.Object) val;
      val.Dispose ();
      return ret;
    }
  }

  [Gst.GLib.Property ("type") ]
  public StreamType Type {
    get {
      Gst.GLib.Value val = GetProperty ("type");
      StreamType ret = (StreamType) val;
      val.Dispose ();
      return ret;
    }
  }

  [Gst.GLib.Property ("decoder") ]
  public string Decoder {
    get {
      Gst.GLib.Value val = GetProperty ("decoder");
      string ret = (string) val;
      val.Dispose ();
      return ret;
    }
  }

  [Gst.GLib.Property ("mute") ]
  public bool Mute {
    get {
      Gst.GLib.Value val = GetProperty ("mute");
      bool ret = (bool) val;
      val.Dispose ();
      return ret;
    }
    set {
      Gst.GLib.Value val = new Gst.GLib.Value (this, "mute");
      val.Val = value;
      SetProperty ("mute", val);
      val.Dispose ();
    }
  }


  [Gst.GLib.Property ("caps") ]
  public Gst.Caps Caps {
    get {
      Gst.GLib.Value val = GetProperty ("caps");
      Gst.Caps ret = (Gst.Caps) val;
      val.Dispose ();
      return ret;
    }
  }

  [Gst.GLib.Property ("language-code") ]
  public string LanguageCode {
    get {
      Gst.GLib.Value val = GetProperty ("language-code");
      string ret = (string) val;
      val.Dispose ();
      return ret;
    }
  }

  [Gst.GLib.Property ("codec") ]
  public string Codec {
    get {
      Gst.GLib.Value val = GetProperty ("codec");
      string ret = (string) val;
      val.Dispose ();
      return ret;
    }
  }

  public delegate void MutedHandler (object o, MutedArgs args);

  public class MutedArgs : Gst.GLib.SignalArgs {
    public bool Mute {
      get {
        return (bool) Args[0];
      }
    }

  }

  public event MutedHandler Muted {
    add {
      DynamicSignal.Connect (this, "muted", value);
    }

    remove {
      DynamicSignal.Disconnect (this, "muted", value);
    }
  }

  [GTypeName ("GstStreamType") ]
  public enum StreamType {
    Unknown = 0,
    Audio = 1,
    Video = 2,
    Text = 3,
    Subpicture = 4,
    Element = 5
  }
}
