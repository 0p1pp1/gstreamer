
    public new GLib.Value GetProperty(string propertyName) 
    {
        return base.GetProperty(propertyName);
    }

    public new void SetProperty(string propertyName, GLib.Value value) 
    {
        base.SetProperty(propertyName, value);
    }

    public void SetProperty(string propertyName, string value) 
    {
        GLib.Value val = new GLib.Value(value);
        base.SetProperty(propertyName, val);
    }

    public void SetProperty(string propertyName, double value) 
    {
        GLib.Value val = new GLib.Value(value);
        base.SetProperty(propertyName, val);
    }

    public void SetProperty(string propertyName, bool value) 
    {
        GLib.Value val = new GLib.Value(value);
        base.SetProperty(propertyName, val);
    }

    [DllImport("gstreamer-0.10.dll")]
    private static extern bool gst_element_query_position(IntPtr raw, ref Format format, out long cur);

    public bool QueryPosition(Gst.Format format, out long current) 
    {
        return gst_element_query_position(Handle, ref format, out current);
    }

    [DllImport("gstreamer-0.10.dll")]
    private static extern bool gst_element_query_duration(IntPtr raw, ref Format format, out long duration);

    public bool QueryDuration(Gst.Format format, out long duration) 
    {
        return gst_element_query_duration(Handle, ref format, out duration);
    }

	//static Type [] paramTypes;

    public void AddCustomEvent(string name, Delegate onCustom ) {
	System.Reflection.ParameterInfo [] pi = onCustom.Method.GetParameters();

	Type [] paramTypes = new Type[pi.Length];
	for(int i=0; i < paramTypes.Length; i++) {
		paramTypes[i] = pi[i].ParameterType;
	}

	string DYNAMIC_ASSEMBLY = "Gst.DynamicSignals.Element." + Name + "." + name;
	string DYNAMIC_CLASS = "NewDSMH";

	DynamicSignalHandlerGenerator dshGenerator = new DynamicSignalHandlerGenerator(paramTypes, DYNAMIC_ASSEMBLY, DYNAMIC_CLASS);
	Type NewType = System.Reflection.Assembly.LoadFile(DYNAMIC_ASSEMBLY +  ".dll").GetType(DYNAMIC_ASSEMBLY + "." + DYNAMIC_CLASS);

	DynamicSignalMarshalHandler dsmh = Activator.CreateInstance(NewType) as DynamicSignalMarshalHandler;

	GLib.Signal sig = GLib.Signal.Lookup (this, name, dsmh.Func());
	
	sig.AddDelegate(onCustom);
    }

	public static void CustomMarshaller(params IntPtr [] args) {
		GLib.Signal sig = ((GCHandle) args[args.Length - 1]).Target as GLib.Signal;
		Delegate d = sig.Handler as Delegate;
		System.Reflection.ParameterInfo [] pi = d.Method.GetParameters();

		Type [] paramTypes = new Type[pi.Length];
		for(int i=0; i<pi.Length; i++)
			paramTypes[i] = pi[i].ParameterType;

		object [] newargs = new object[args.Length - 1];
		for(int i=0; i < newargs.Length; i++) {
			if(paramTypes[i].IsSubclassOf(typeof(GLib.Object))) {
				newargs[i] = GLib.Object.GetObject(args[i]);
			}
			else if(paramTypes[i].IsSubclassOf(typeof(GLib.Opaque))) {
				newargs[i] = GLib.Opaque.GetOpaque(args[i], paramTypes[i], true);
			}
		}

		d.DynamicInvoke(newargs);	
	}

