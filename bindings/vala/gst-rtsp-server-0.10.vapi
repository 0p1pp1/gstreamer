/* gst-rtsp-server-0.10.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gst", lower_case_cprefix = "gst_")]
namespace Gst {
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-client.h")]
	public class RTSPClient : GLib.Object {
		public void* address;
		public weak Gst.RTSPConnection connection;
		public weak Gst.RTSPMedia media;
		public weak Gst.RTSPSessionPool pool;
		public weak GLib.Thread thread;
		public bool accept (GLib.IOChannel source);
		public weak Gst.RTSPSessionPool get_session_pool ();
		[CCode (has_construct_function = false)]
		public RTSPClient (Gst.RTSPServer server);
		public void set_session_pool (Gst.RTSPSessionPool pool);
		[NoAccessorMethod]
		public Gst.RTSPServer server { get; construct; }
	}
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-media.h")]
	public class RTSPMedia : GLib.Object {
		public bool prepared;
		public weak GLib.Array streams;
		public weak Gst.RTSPMediaStream get_stream (uint idx);
		public uint n_streams ();
		[CCode (has_construct_function = false)]
		public RTSPMedia (string name);
		[NoAccessorMethod]
		public string location { get; construct; }
		[NoAccessorMethod]
		public Gst.RTSPUrl url { get; construct; }
	}
	[Compact]
	[CCode (cheader_filename = "gst/rtsp-server/rstp-media.h")]
	public class RTSPMediaStream {
		public weak Gst.Caps caps;
		public ulong caps_sig;
		public weak Gst.Element element;
		public uint idx;
		public weak Gst.RTSPMedia media;
		public weak string name;
		public weak Gst.Element payloader;
		public weak Gst.Pad srcpad;
	}
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-server.h")]
	public class RTSPServer : Gst.Object {
		public weak string host;
		public weak GLib.IOChannel io_channel;
		public weak GLib.TimeoutSource io_watch;
		public weak Gst.RTSPSessionPool pool;
		public int server_port;
		public void* server_sin;
		public weak Gst.PollFD server_sock;
		public uint attach (GLib.MainContext context);
		public virtual weak Gst.Element prepare_media (Gst.RTSPMedia media, Gst.Bin bin);
		[NoAccessorMethod]
		public int port { get; construct; }
	}
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-session.h")]
	public class RTSPSession : GLib.Object {
		public weak GLib.List medias;
		public weak string sessionid;
		public weak Gst.RTSPSessionMedia get_media (Gst.RTSPMedia media);
		public static weak Gst.RTSPSessionStream get_stream (Gst.RTSPSessionMedia media, uint idx);
		[CCode (has_construct_function = false)]
		public RTSPSession (string sessionid);
	}
	[Compact]
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-session.h")]
	public class RTSPSessionMedia {
		public weak Gst.Element fdsink;
		public weak Gst.RTSPMedia media;
		public weak Gst.Element pipeline;
		public weak Gst.Element rtpbin;
		public weak Gst.RTSPSession session;
		public weak GLib.List streams;
		public Gst.StateChangeReturn pause ();
		public Gst.StateChangeReturn play ();
		public Gst.StateChangeReturn stop ();
	}
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-session.h")]
	public class RTSPSessionPool : GLib.Object {
		public weak GLib.Mutex @lock;
		public weak GLib.HashTable sessions;
		public weak Gst.RTSPSession create ();
		public weak Gst.RTSPSession find (string sessionid);
		[CCode (has_construct_function = false)]
		public RTSPSessionPool ();
		public void remove (Gst.RTSPSession sess);
	}
	[Compact]
	[CCode (cheader_filename = "gst/rtsp-server/rtsp-session-pool.h")]
	public class RTSPSessionStream {
		public weak Gst.RTSPTransport client_trans;
		public weak string destination;
		public uint idx;
		public weak Gst.RTSPSessionMedia media;
		public weak Gst.RTSPMediaStream media_stream;
		public weak Gst.Pad recv_rtcp_sink;
		public weak Gst.Pad send_rtcp_src;
		public weak Gst.Pad send_rtp_sink;
		public weak Gst.Pad send_rtp_src;
		public weak Gst.RTSPTransport server_trans;
		[NoArrayLength]
		public weak Gst.Element[] udpsink;
		[NoArrayLength]
		public weak Gst.Element[] udpsrc;
		public weak Gst.RTSPTransport set_transport (string destination, Gst.RTSPTransport ct);
	}
}
