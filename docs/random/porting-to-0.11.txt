The 0.11 porting guide
----------------------

* All deprecated methods were removed. Recompile against 0.10 with
  DISABLE_DEPRECATED and fix issues before attempting to port to 0.11.

* multifdsink, tcpclientsink, tcpclientsrc, tcpserversrc the protocol property
  is removed, use gdppay and gdpdepay.

* GstObject:
    GST_OBJECT_DISPOSING flag removed
    GST_OBJECT_IS_DISPOSING removed
    GST_OBJECT_FLOATING flag remove, GstObject is now GInitiallyUnowned
    GST_OBJECT_IS_FLOATING removed, use g_object_is_floating()

    GST_CLASS_GET_LOCK, GST_CLASS_LOCK, GST_CLASS_TRYLOCK, GST_CLASS_UNLOCK,
    used to be a workaround for thread-unsafe glib < 2.8

    gst_object_ref_sink() has gpointer as result to make it more like the
    GObject version.

    gst_object_sink() removed, use gst_object_ref_sink() instead.

    gst_class_signal_connect() removed, was only used for XML

    parent-set and parent-unset signals removed. Use notify:parent. Currently
    still disabled because of deep notify locking issues.

* GstElement:
    GstElementDetails is removed and replaced with more generic metadata.

    gst_element_class_set_details_simple() -> gst_element_class_set_metadata()
    gst_element_class_set_documentation_uri -> gst_element_class_add_metadata
    gst_element_class_set_icon_name -> gst_element_class_add_metadata

    gst_element_factory_get_longname -> gst_element_factory_get_metadata
    gst_element_factory_get_klass -> gst_element_factory_get_metadata
    gst_element_factory_get_description -> gst_element_factory_get_metadata
    gst_element_factory_get_author -> gst_element_factory_get_metadata
    gst_element_factory_get_documentation_uri -> gst_element_factory_get_metadata
    gst_element_factory_get_icon_name -> gst_element_factory_get_metadata

    gstelementmetadata.h contains the keys for all standard metadata.

* GstPad:
    gst_pad_get_caps() does not return writable caps anymore and an explicit
    gst_caps_make_writable() needs to be performed. This was the functionality
    of gst_pad_get_caps_reffed(), which is removed now.

    A similar change was done for gst_pad_peer_get_caps() and
    gst_pad_peer_get_caps_reffed()

* GstMiniObject
    A miniobject is now a simple refcounted structure holding the information
    common to buffers, events, messages, queries and caps.

    There is no more GST_TYPE_MINIOBJECT as the type for subclasses.
    G_TYPE_BOXED can be used as the type of all GstMiniObject based types such
    as buffers, events, messages, caps, etc. Signals, for example, would use the
    boxed type if the argument include GstMiniObject derived types.

    gst_mini_object_new() is removed. You would allocate memory with the the
    methods specific for the derived type.

    GstParamSpecMiniObject is removed, use boxed param spec now with the GType
    of the specific GstMiniObject derived type. Also
    gst_param_spec_mini_object().

    gst_param_spec_mini_object() -> g_param_spec_boxed()

    The specific gst_value_*_mini_object() methods are removed, used the generic
    boxed methods instead.

    gst_value_set_mini_object() -> g_value_set_boxed()
    gst_value_take_mini_object() -> g_value_take_boxed()
    gst_value_take_get_object() -> g_value_get_boxed()
    gst_value_take_dup_object() -> g_value_dup_boxed()

* GstBuffer
    A GstBuffer is now a simple boxed type this means that subclassing is not
    possible anymore. To add more data to the buffer, you have to use the
    metadata feature of buffers.

* GstEvent
* GstQuery
    Boxed types derived from GstMiniObject.

* GstBufferList
    Is now a boxed type derived from GstMiniObject.

* GstMessage
    Is now a boxed type derived from GstMiniObject

* GstCaps
    Is now a boxed type derived from GstMiniObject. 


